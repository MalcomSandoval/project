---
import DashboardLayout from '../layouts/DashboardLayout.astro';
---

<DashboardLayout title="Inventario" currentPage="/inventario">
  <div class="space-y-8">
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-3xl font-bold text-bavarian-blue">Gesti√≥n de Inventario</h1>
        <p class="text-gray-600 mt-1">Administra tus productos y stock</p>
      </div>
      <button 
        id="nuevo-producto-btn"
        class="bg-bavarian-blue hover:bg-bavarian-darkBlue text-white px-6 py-3 rounded-lg font-medium transition-all duration-200 transform hover:scale-105 flex items-center gap-2"
      >
        <span class="text-xl">+</span>
        Nuevo Producto
      </button>
    </div>
    
    <!-- Estad√≠sticas r√°pidas -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
      <div class="bg-white rounded-xl shadow-lg p-6 border-l-4 border-bavarian-blue">
        <div class="flex items-center justify-between">
          <div>
            <h3 class="text-gray-500 text-sm font-medium">Total Productos</h3>
            <p id="total-productos" class="text-2xl font-bold text-gray-900 mt-1">0</p>
          </div>
          <div class="text-3xl">üì¶</div>
        </div>
      </div>
      
      <div class="bg-white rounded-xl shadow-lg p-6 border-l-4 border-bavarian-gold">
        <div class="flex items-center justify-between">
          <div>
            <h3 class="text-gray-500 text-sm font-medium">Valor Inventario</h3>
            <p id="valor-inventario" class="text-2xl font-bold text-gray-900 mt-1">$0.00</p>
          </div>
          <div class="text-3xl">üí∞</div>
        </div>
      </div>
      
      <div class="bg-white rounded-xl shadow-lg p-6 border-l-4 border-red-500">
        <div class="flex items-center justify-between">
          <div>
            <h3 class="text-gray-500 text-sm font-medium">Stock Bajo</h3>
            <p id="stock-bajo" class="text-2xl font-bold text-gray-900 mt-1">0</p>
          </div>
          <div class="text-3xl">‚ö†Ô∏è</div>
        </div>
      </div>
      
      <div class="bg-white rounded-xl shadow-lg p-6 border-l-4 border-green-500">
        <div class="flex items-center justify-between">
          <div>
            <h3 class="text-gray-500 text-sm font-medium">Categor√≠as</h3>
            <p id="total-categorias" class="text-2xl font-bold text-gray-900 mt-1">0</p>
          </div>
          <div class="text-3xl">üìã</div>
        </div>
      </div>
    </div>
    
    <!-- Filtros y b√∫squeda -->
    <div class="bg-white rounded-xl shadow-lg p-6">
      <div class="flex flex-col md:flex-row gap-4">
        <div class="flex-1">
          <input
            type="text"
            id="buscar-producto"
            placeholder="Buscar productos por nombre o c√≥digo..."
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-bavarian-blue focus:border-transparent"
          />
        </div>
        <div>
          <select
            id="filtro-categoria"
            class="px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-bavarian-blue focus:border-transparent"
          >
            <option value="">Todas las categor√≠as</option>
            <option value="General">General</option>
            <option value="Bebidas">Bebidas</option>
            <option value="Snacks">Snacks</option>
            <option value="Congelados">Congelados</option>
            <option value="L√°cteos">L√°cteos</option>
            <option value="Dulces">Dulces</option>
            <option value="Cigarros">Cigarros</option>
          </select>
        </div>
        <div>
          <select
            id="filtro-stock"
            class="px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-bavarian-blue focus:border-transparent"
          >
            <option value="">Todo el stock</option>
            <option value="bajo">Stock bajo (‚â§5)</option>
            <option value="disponible">Con stock (>0)</option>
            <option value="agotado">Sin stock (0)</option>
          </select>
        </div>
      </div>
    </div>
    
    <!-- Tabla de productos -->
    <div class="bg-white rounded-xl shadow-lg overflow-hidden">
      <div class="px-6 py-4 border-b border-gray-200">
        <h3 class="text-lg font-semibold text-bavarian-blue">Lista de Productos</h3>
      </div>
      <div class="overflow-x-auto">
        <table class="w-full">
          <thead class="bg-bavarian-blue text-white">
            <tr>
              <th class="px-6 py-4 text-left font-medium">Producto</th>
              <th class="px-6 py-4 text-left font-medium">Categor√≠a</th>
              <th class="px-6 py-4 text-left font-medium">Precio</th>
              <th class="px-6 py-4 text-left font-medium">Stock</th>
              <th class="px-6 py-4 text-left font-medium">Valor Total</th>
              <th class="px-6 py-4 text-center font-medium">Acciones</th>
            </tr>
          </thead>
          <tbody id="productos-list">
            <tr>
              <td colspan="6" class="px-6 py-12 text-center text-gray-500">
                <div class="flex flex-col items-center">
                  <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-bavarian-blue mb-4"></div>
                  Cargando productos...
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
  
  <!-- Contenedor para el formulario modal -->
  <div id="product-form-container"></div>
</DashboardLayout>

<script>
  import { productos } from '../services/supabase.js';
  
  let productosData = [];
  let productosFiltrados = [];
  let productoEditando = null;
  
  const cargarProductos = async () => {
    try {
      const result = await productos.getAll();
      if (result.data) {
        productosData = result.data;
        productosFiltrados = productosData;
        renderizarProductos();
        actualizarEstadisticas();
      } else {
        mostrarError('Error cargando productos');
      }
    } catch (error) {
      console.error('Error cargando productos:', error);
      mostrarError('Error de conexi√≥n');
    }
  };
  
  const renderizarProductos = () => {
    const tbody = document.getElementById('productos-list');
    
    if (productosFiltrados.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="6" class="px-6 py-12 text-center text-gray-500">
            <div class="flex flex-col items-center">
              <div class="text-4xl mb-4">üì¶</div>
              <p class="text-lg font-medium">No hay productos</p>
              <p class="text-sm">Agrega tu primer producto para comenzar</p>
            </div>
          </td>
        </tr>
      `;
      return;
    }
    
    tbody.innerHTML = productosFiltrados.map(producto => {
      const stockClass = producto.stock <= 5 ? 'text-red-600 font-bold' : 
                        producto.stock === 0 ? 'text-red-800 font-bold' : 'text-green-600';
      const valorTotal = (parseFloat(producto.precio) * producto.stock).toFixed(2);
      
      return `
        <tr class="border-b border-gray-100 hover:bg-gray-50 transition-colors duration-150">
          <td class="px-6 py-4">
            <div>
              <div class="font-medium text-gray-900">${producto.nombre}</div>
              ${producto.codigo_barras ? `<div class="text-sm text-gray-500">${producto.codigo_barras}</div>` : ''}
            </div>
          </td>
          <td class="px-6 py-4">
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-bavarian-blue bg-opacity-10 text-bavarian-blue">
              ${producto.categoria}
            </span>
          </td>
          <td class="px-6 py-4 font-medium">$${parseFloat(producto.precio).toFixed(2)}</td>
          <td class="px-6 py-4 ${stockClass}">${producto.stock}</td>
          <td class="px-6 py-4 font-medium">$${valorTotal}</td>
          <td class="px-6 py-4 text-center">
            <div class="flex justify-center gap-2">
              <button 
                onclick="editarProducto('${producto.id}')"
                class="text-bavarian-blue hover:text-bavarian-darkBlue font-medium transition-colors duration-150"
                title="Editar producto"
              >
                ‚úèÔ∏è
              </button>
              <button 
                onclick="eliminarProducto('${producto.id}', '${producto.nombre}')"
                class="text-red-500 hover:text-red-700 font-medium transition-colors duration-150"
                title="Eliminar producto"
              >
                üóëÔ∏è
              </button>
            </div>
          </td>
        </tr>
      `;
    }).join('');
  };
  
  const actualizarEstadisticas = () => {
    const totalProductos = productosData.length;
    const valorInventario = productosData.reduce((sum, p) => sum + (parseFloat(p.precio) * p.stock), 0);
    const stockBajo = productosData.filter(p => p.stock <= 5).length;
    const categorias = [...new Set(productosData.map(p => p.categoria))].length;
    
    document.getElementById('total-productos').textContent = totalProductos;
    document.getElementById('valor-inventario').textContent = `$${valorInventario.toFixed(2)}`;
    document.getElementById('stock-bajo').textContent = stockBajo;
    document.getElementById('total-categorias').textContent = categorias;
  };
  
  const filtrarProductos = () => {
    const busqueda = document.getElementById('buscar-producto').value.toLowerCase();
    const categoria = document.getElementById('filtro-categoria').value;
    const stock = document.getElementById('filtro-stock').value;
    
    productosFiltrados = productosData.filter(producto => {
      const matchBusqueda = !busqueda || 
        producto.nombre.toLowerCase().includes(busqueda) ||
        (producto.codigo_barras && producto.codigo_barras.includes(busqueda));
      
      const matchCategoria = !categoria || producto.categoria === categoria;
      
      let matchStock = true;
      if (stock === 'bajo') matchStock = producto.stock <= 5;
      else if (stock === 'disponible') matchStock = producto.stock > 0;
      else if (stock === 'agotado') matchStock = producto.stock === 0;
      
      return matchBusqueda && matchCategoria && matchStock;
    });
    
    renderizarProductos();
  };
  
  const mostrarFormularioNuevo = () => {
    productoEditando = null;
    mostrarFormularioProducto();
  };
  
  const editarProducto = async (id) => {
    try {
      const result = await productos.getById(id);
      if (result.data) {
        productoEditando = result.data;
        mostrarFormularioProducto();
      } else {
        mostrarError('Error cargando producto para editar');
      }
    } catch (error) {
      console.error('Error cargando producto:', error);
      mostrarError('Error cargando producto');
    }
  };
  
  const eliminarProducto = async (id, nombre) => {
    if (confirm(`¬øEst√°s seguro de eliminar "${nombre}"?`)) {
      try {
        const result = await productos.delete(id);
        if (result.error) {
          mostrarError('Error eliminando producto: ' + result.error.message);
        } else {
          mostrarExito('Producto eliminado exitosamente');
          cargarProductos();
        }
      } catch (error) {
        console.error('Error eliminando producto:', error);
        mostrarError('Error eliminando producto');
      }
    }
  };
  
  const mostrarFormularioProducto = () => {
    const container = document.getElementById('product-form-container');
    
    // Crear modal HTML directamente
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50';
    modal.id = 'product-modal';
    
    const formData = productoEditando || {
      nombre: '',
      descripcion: '',
      precio: '',
      stock: '',
      categoria: 'General',
      codigo_barras: ''
    };
    
    modal.innerHTML = `
      <div class="bg-white rounded-xl shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <div class="p-6">
          <div class="flex justify-between items-center mb-6">
            <h3 class="text-2xl font-bold text-bavarian-blue">
              ${productoEditando ? 'Editar Producto' : 'Nuevo Producto'}
            </h3>
            <button onclick="cerrarModal()" class="text-gray-400 hover:text-gray-600 text-2xl">√ó</button>
          </div>
          
          <div id="form-messages"></div>
          
          <form id="product-form" class="space-y-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Nombre del Producto *</label>
                <input type="text" id="nombre" value="${formData.nombre}" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-bavarian-blue focus:border-transparent" placeholder="Ej: Coca Cola 600ml" required />
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Precio *</label>
                <input type="number" step="0.01" min="0" id="precio" value="${formData.precio}" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-bavarian-blue focus:border-transparent" placeholder="0.00" required />
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Stock Inicial</label>
                <input type="number" min="0" id="stock" value="${formData.stock}" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-bavarian-blue focus:border-transparent" placeholder="0" />
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Categor√≠a</label>
                <select id="categoria" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-bavarian-blue focus:border-transparent">
                  <option value="General" ${formData.categoria === 'General' ? 'selected' : ''}>General</option>
                  <option value="Bebidas" ${formData.categoria === 'Bebidas' ? 'selected' : ''}>Bebidas</option>
                  <option value="Snacks" ${formData.categoria === 'Snacks' ? 'selected' : ''}>Snacks</option>
                  <option value="Congelados" ${formData.categoria === 'Congelados' ? 'selected' : ''}>Congelados</option>
                  <option value="L√°cteos" ${formData.categoria === 'L√°cteos' ? 'selected' : ''}>L√°cteos</option>
                  <option value="Dulces" ${formData.categoria === 'Dulces' ? 'selected' : ''}>Dulces</option>
                  <option value="Cigarros" ${formData.categoria === 'Cigarros' ? 'selected' : ''}>Cigarros</option>
                </select>
              </div>
              
              <div class="md:col-span-2">
                <label class="block text-sm font-medium text-gray-700 mb-2">C√≥digo de Barras</label>
                <input type="text" id="codigo_barras" value="${formData.codigo_barras || ''}" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-bavarian-blue focus:border-transparent" placeholder="Opcional" />
              </div>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Descripci√≥n</label>
              <textarea id="descripcion" rows="3" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-bavarian-blue focus:border-transparent" placeholder="Descripci√≥n opcional del producto">${formData.descripcion || ''}</textarea>
            </div>
            
            <div class="flex gap-4 pt-4">
              <button type="submit" class="flex-1 bg-bavarian-blue hover:bg-bavarian-darkBlue text-white py-3 px-6 rounded-lg font-medium transition-all duration-200">
                ${productoEditando ? 'Actualizar' : 'Crear'} Producto
              </button>
              <button type="button" onclick="cerrarModal()" class="px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors duration-200">
                Cancelar
              </button>
            </div>
          </form>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
    
    // Manejar env√≠o del formulario
    document.getElementById('product-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      await guardarProducto();
    });
  };
  
  const guardarProducto = async () => {
    const formData = {
      nombre: document.getElementById('nombre').value.trim(),
      descripcion: document.getElementById('descripcion').value.trim(),
      precio: parseFloat(document.getElementById('precio').value),
      stock: parseInt(document.getElementById('stock').value) || 0,
      categoria: document.getElementById('categoria').value,
      codigo_barras: document.getElementById('codigo_barras').value.trim()
    };
    
    if (!formData.nombre || !formData.precio || formData.precio <= 0) {
      mostrarMensajeForm('Nombre y precio son requeridos', 'error');
      return;
    }
    
    try {
      let result;
      if (productoEditando) {
        result = await productos.update(productoEditando.id, formData);
      } else {
        result = await productos.create(formData);
      }
      
      if (result.error) {
        mostrarMensajeForm(result.error.message, 'error');
      } else {
        mostrarExito(productoEditando ? 'Producto actualizado exitosamente' : 'Producto creado exitosamente');
        cerrarModal();
        cargarProductos();
      }
    } catch (error) {
      mostrarMensajeForm('Error al guardar el producto', 'error');
    }
  };
  
  const mostrarMensajeForm = (mensaje, tipo) => {
    const container = document.getElementById('form-messages');
    const className = tipo === 'error' ? 'bg-red-50 border-red-200 text-red-700' : 'bg-green-50 border-green-200 text-green-700';
    const icon = tipo === 'error' ? '‚ö†Ô∏è' : '‚úÖ';
    
    container.innerHTML = `
      <div class="${className} border px-4 py-3 rounded-lg mb-4">
        <div class="flex items-center">
          <span class="mr-2">${icon}</span>
          ${mensaje}
        </div>
      </div>
    `;
    
    setTimeout(() => {
      container.innerHTML = '';
    }, 5000);
  };
  
  const cerrarModal = () => {
    const modal = document.getElementById('product-modal');
    if (modal) {
      document.body.removeChild(modal);
    }
    productoEditando = null;
  };
  
  const mostrarError = (mensaje) => {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-4 rounded-lg shadow-lg z-50';
    errorDiv.innerHTML = `
      <div class="flex items-center">
        <span class="text-xl mr-2">‚ùå</span>
        ${mensaje}
      </div>
    `;
    document.body.appendChild(errorDiv);
    
    setTimeout(() => {
      if (document.body.contains(errorDiv)) {
        document.body.removeChild(errorDiv);
      }
    }, 4000);
  };
  
  const mostrarExito = (mensaje) => {
    const successDiv = document.createElement('div');
    successDiv.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-4 rounded-lg shadow-lg z-50';
    successDiv.innerHTML = `
      <div class="flex items-center">
        <span class="text-xl mr-2">‚úÖ</span>
        ${mensaje}
      </div>
    `;
    document.body.appendChild(successDiv);
    
    setTimeout(() => {
      if (document.body.contains(successDiv)) {
        document.body.removeChild(successDiv);
      }
    }, 4000);
  };
  
  // Inicializaci√≥n
  if (typeof window !== 'undefined') {
    document.addEventListener('DOMContentLoaded', () => {
      cargarProductos();
      
      // Event listeners
      document.getElementById('nuevo-producto-btn').addEventListener('click', mostrarFormularioNuevo);
      document.getElementById('buscar-producto').addEventListener('input', filtrarProductos);
      document.getElementById('filtro-categoria').addEventListener('change', filtrarProductos);
      document.getElementById('filtro-stock').addEventListener('change', filtrarProductos);
    });
  }
  
  // Hacer funciones globales
  window.editarProducto = editarProducto;
  window.eliminarProducto = eliminarProducto;
  window.cerrarModal = cerrarModal;
</script>
</DashboardLayout>