---
import DashboardLayout from '../layouts/DashboardLayout.astro';
---

<DashboardLayout title="Ventas" currentPage="/ventas">
  <div class="space-y-8">
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-3xl font-bold text-bavarian-blue">Gestión de Ventas</h1>
        <p class="text-gray-600 mt-1">Registra y administra las ventas</p>
      </div>
    </div>
    
    <!-- Estadísticas del día -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
      <div class="bg-white rounded-xl shadow-lg p-6 border-l-4 border-bavarian-blue">
        <div class="flex items-center justify-between">
          <div>
            <h3 class="text-gray-500 text-sm font-medium">Ventas Hoy</h3>
            <p id="ventas-hoy" class="text-2xl font-bold text-gray-900 mt-1">$0.00</p>
          </div>
          <div class="text-3xl">💰</div>
        </div>
      </div>
      
      <div class="bg-white rounded-xl shadow-lg p-6 border-l-4 border-bavarian-gold">
        <div class="flex items-center justify-between">
          <div>
            <h3 class="text-gray-500 text-sm font-medium">Transacciones</h3>
            <p id="transacciones-hoy" class="text-2xl font-bold text-gray-900 mt-1">0</p>
          </div>
          <div class="text-3xl">🧾</div>
        </div>
      </div>
      
      <div class="bg-white rounded-xl shadow-lg p-6 border-l-4 border-green-500">
        <div class="flex items-center justify-between">
          <div>
            <h3 class="text-gray-500 text-sm font-medium">Promedio Venta</h3>
            <p id="promedio-venta" class="text-2xl font-bold text-gray-900 mt-1">$0.00</p>
          </div>
          <div class="text-3xl">📊</div>
        </div>
      </div>
      
      <div class="bg-white rounded-xl shadow-lg p-6 border-l-4 border-purple-500">
        <div class="flex items-center justify-between">
          <div>
            <h3 class="text-gray-500 text-sm font-medium">Método Popular</h3>
            <p id="metodo-popular" class="text-2xl font-bold text-gray-900 mt-1">-</p>
          </div>
          <div class="text-3xl">💳</div>
        </div>
      </div>
    </div>
    
    <!-- Formulario de nueva venta -->
    <div id="venta-form-container">
      <!-- El componente VentaForm se cargará aquí -->
    </div>
    
    <!-- Historial de ventas -->
    <div class="bg-white rounded-xl shadow-lg overflow-hidden">
      <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
        <h3 class="text-lg font-semibold text-bavarian-blue">Historial de Ventas</h3>
        <div class="flex gap-4">
          <select id="filtro-metodo" class="px-3 py-2 border border-gray-300 rounded-lg text-sm">
            <option value="">Todos los métodos</option>
            <option value="efectivo">Efectivo</option>
            <option value="tarjeta">Tarjeta</option>
            <option value="transferencia">Transferencia</option>
          </select>
          <input 
            type="date" 
            id="filtro-fecha"
            class="px-3 py-2 border border-gray-300 rounded-lg text-sm"
          />
        </div>
      </div>
      <div class="overflow-x-auto">
        <table class="w-full">
          <thead class="bg-bavarian-blue text-white">
            <tr>
              <th class="px-6 py-4 text-left font-medium">Fecha</th>
              <th class="px-6 py-4 text-left font-medium">Total</th>
              <th class="px-6 py-4 text-left font-medium">Método</th>
              <th class="px-6 py-4 text-left font-medium">Productos</th>
              <th class="px-6 py-4 text-center font-medium">Detalles</th>
            </tr>
          </thead>
          <tbody id="ventas-list">
            <tr>
              <td colspan="5" class="px-6 py-12 text-center text-gray-500">
                <div class="flex flex-col items-center">
                  <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-bavarian-blue mb-4"></div>
                  Cargando ventas...
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</DashboardLayout>

<script>
  import { ventas } from '../services/supabase.js';
  import VentaForm from '../components/VentaForm.svelte';
  
  let ventasData = [];
  let ventasFiltradas = [];
  let ventaFormComponent = null;
  
  const cargarVentas = async () => {
    try {
      const result = await ventas.getAll();
      if (result.data) {
        ventasData = result.data;
        ventasFiltradas = ventasData;
        renderizarVentas();
        actualizarEstadisticas();
      }
    } catch (error) {
      console.error('Error cargando ventas:', error);
      mostrarError('Error cargando ventas');
    }
  };
  
  const renderizarVentas = () => {
    const tbody = document.getElementById('ventas-list');
    
    if (ventasFiltradas.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="5" class="px-6 py-12 text-center text-gray-500">
            <div class="flex flex-col items-center">
              <div class="text-4xl mb-4">🛒</div>
              <p class="text-lg font-medium">No hay ventas registradas</p>
              <p class="text-sm">Las ventas aparecerán aquí una vez que realices la primera</p>
            </div>
          </td>
        </tr>
      `;
      return;
    }
    
    tbody.innerHTML = ventasFiltradas.map(venta => {
      const fecha = new Date(venta.fecha_venta);
      const fechaFormateada = fecha.toLocaleDateString('es-MX', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
      
      const metodosIconos = {
        'efectivo': '💵',
        'tarjeta': '💳',
        'transferencia': '🏦'
      };
      
      const totalProductos = venta.detalles_venta?.reduce((sum, detalle) => sum + detalle.cantidad, 0) || 0;
      
      return `
        <tr class="border-b border-gray-100 hover:bg-gray-50 transition-colors duration-150">
          <td class="px-6 py-4">
            <div class="text-sm font-medium text-gray-900">${fechaFormateada}</div>
          </td>
          <td class="px-6 py-4">
            <div class="text-lg font-bold text-bavarian-blue">$${parseFloat(venta.total).toFixed(2)}</div>
          </td>
          <td class="px-6 py-4">
            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800">
              ${metodosIconos[venta.metodo_pago] || '💰'} ${venta.metodo_pago}
            </span>
          </td>
          <td class="px-6 py-4">
            <div class="text-sm text-gray-600">${totalProductos} productos</div>
          </td>
          <td class="px-6 py-4 text-center">
            <button 
              onclick="verDetalleVenta('${venta.id}')"
              class="text-bavarian-blue hover:text-bavarian-darkBlue font-medium transition-colors duration-150"
            >
              Ver detalles
            </button>
          </td>
        </tr>
      `;
    }).join('');
  };
  
  const actualizarEstadisticas = async () => {
    try {
      // Obtener ventas de hoy
      const ventasHoyResult = await ventas.getVentasHoy();
      const ventasHoy = ventasHoyResult.data || [];
      
      const totalVentasHoy = ventasHoy.reduce((sum, v) => sum + parseFloat(v.total), 0);
      const transaccionesHoy = ventasHoy.length;
      const promedioVenta = transaccionesHoy > 0 ? totalVentasHoy / transaccionesHoy : 0;
      
      // Método de pago más popular
      const metodosPago = {};
      ventasHoy.forEach(v => {
        metodosPago[v.metodo_pago] = (metodosPago[v.metodo_pago] || 0) + 1;
      });
      
      const metodosOrdenados = Object.entries(metodosPago).sort(([,a], [,b]) => b - a);
      const metodoPopular = metodosOrdenados.length > 0 ? metodosOrdenados[0][0] : '-';
      
      // Actualizar UI
      document.getElementById('ventas-hoy').textContent = `$${totalVentasHoy.toFixed(2)}`;
      document.getElementById('transacciones-hoy').textContent = transaccionesHoy;
      document.getElementById('promedio-venta').textContent = `$${promedioVenta.toFixed(2)}`;
      document.getElementById('metodo-popular').textContent = metodoPopular;
      
    } catch (error) {
      console.error('Error actualizando estadísticas:', error);
    }
  };
  
  const filtrarVentas = () => {
    const metodo = document.getElementById('filtro-metodo').value;
    const fecha = document.getElementById('filtro-fecha').value;
    
    ventasFiltradas = ventasData.filter(venta => {
      const matchMetodo = !metodo || venta.metodo_pago === metodo;
      
      let matchFecha = true;
      if (fecha) {
        const fechaVenta = new Date(venta.fecha_venta).toISOString().split('T')[0];
        matchFecha = fechaVenta === fecha;
      }
      
      return matchMetodo && matchFecha;
    });
    
    renderizarVentas();
  };
  
  const verDetalleVenta = (ventaId) => {
    const venta = ventasData.find(v => v.id === ventaId);
    if (!venta) return;
    
    const detalles = venta.detalles_venta || [];
    const detallesHTML = detalles.map(detalle => `
      <div class="flex justify-between items-center py-2 border-b border-gray-100">
        <div>
          <div class="font-medium">${detalle.productos?.nombre || 'Producto'}</div>
          <div class="text-sm text-gray-600">Cantidad: ${detalle.cantidad}</div>
        </div>
        <div class="text-right">
          <div class="font-medium">$${parseFloat(detalle.subtotal).toFixed(2)}</div>
          <div class="text-sm text-gray-600">$${parseFloat(detalle.precio_unitario).toFixed(2)} c/u</div>
        </div>
      </div>
    `).join('');
    
    const fecha = new Date(venta.fecha_venta).toLocaleString('es-MX');
    
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50';
    modal.innerHTML = `
      <div class="bg-white rounded-xl shadow-2xl w-full max-w-md max-h-[80vh] overflow-y-auto">
        <div class="p-6">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-xl font-bold text-bavarian-blue">Detalle de Venta</h3>
            <button onclick="this.closest('.fixed').remove()" class="text-gray-400 hover:text-gray-600 text-2xl">×</button>
          </div>
          
          <div class="mb-4 p-4 bg-gray-50 rounded-lg">
            <div class="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span class="text-gray-600">Fecha:</span>
                <div class="font-medium">${fecha}</div>
              </div>
              <div>
                <span class="text-gray-600">Método:</span>
                <div class="font-medium capitalize">${venta.metodo_pago}</div>
              </div>
            </div>
          </div>
          
          <div class="mb-4">
            <h4 class="font-semibold mb-2">Productos:</h4>
            <div class="space-y-1">
              ${detallesHTML}
            </div>
          </div>
          
          <div class="pt-4 border-t border-gray-200">
            <div class="flex justify-between items-center text-lg font-bold">
              <span>Total:</span>
              <span class="text-bavarian-blue">$${parseFloat(venta.total).toFixed(2)}</span>
            </div>
          </div>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
  };
  
  const mostrarError = (mensaje) => {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-4 rounded-lg shadow-lg z-50';
    errorDiv.innerHTML = `
      <div class="flex items-center">
        <span class="text-xl mr-2">❌</span>
        ${mensaje}
      </div>
    `;
    document.body.appendChild(errorDiv);
    
    setTimeout(() => {
      if (document.body.contains(errorDiv)) {
        document.body.removeChild(errorDiv);
      }
    }, 4000);
  };
  
  const inicializarVentaForm = () => {
    const container = document.getElementById('venta-form-container');
    
    ventaFormComponent = new VentaForm({
      target: container
    });
    
    ventaFormComponent.$on('ventaCreada', () => {
      cargarVentas();
    });
  };
  
  // Inicialización
  if (typeof window !== 'undefined') {
    document.addEventListener('DOMContentLoaded', () => {
      cargarVentas();
      inicializarVentaForm();
      
      // Event listeners para filtros
      document.getElementById('filtro-metodo').addEventListener('change', filtrarVentas);
      document.getElementById('filtro-fecha').addEventListener('change', filtrarVentas);
      
      // Actualizar estadísticas cada 30 segundos
      setInterval(actualizarEstadisticas, 30000);
    });
  }
  
  // Hacer funciones globales
  window.verDetalleVenta = verDetalleVenta;
</script>
</DashboardLayout>