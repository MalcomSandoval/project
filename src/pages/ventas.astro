---
import DashboardLayout from '../layouts/DashboardLayout.astro';
---

<DashboardLayout title="Ventas" currentPage="/ventas">
  <div class="space-y-8">
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-3xl font-bold text-bavarian-blue">Gesti√≥n de Ventas</h1>
        <p class="text-gray-600 mt-1">Registra y administra las ventas</p>
      </div>
    </div>
    
    <!-- Estad√≠sticas del d√≠a -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
      <div class="bg-white rounded-xl shadow-lg p-6 border-l-4 border-bavarian-blue">
        <div class="flex items-center justify-between">
          <div>
            <h3 class="text-gray-500 text-sm font-medium">Ventas Hoy</h3>
            <p id="ventas-hoy" class="text-2xl font-bold text-gray-900 mt-1">$0.00</p>
          </div>
          <div class="text-3xl">üí∞</div>
        </div>
      </div>
      
      <div class="bg-white rounded-xl shadow-lg p-6 border-l-4 border-bavarian-gold">
        <div class="flex items-center justify-between">
          <div>
            <h3 class="text-gray-500 text-sm font-medium">Transacciones</h3>
            <p id="transacciones-hoy" class="text-2xl font-bold text-gray-900 mt-1">0</p>
          </div>
          <div class="text-3xl">üßæ</div>
        </div>
      </div>
      
      <div class="bg-white rounded-xl shadow-lg p-6 border-l-4 border-green-500">
        <div class="flex items-center justify-between">
          <div>
            <h3 class="text-gray-500 text-sm font-medium">Promedio Venta</h3>
            <p id="promedio-venta" class="text-2xl font-bold text-gray-900 mt-1">$0.00</p>
          </div>
          <div class="text-3xl">üìä</div>
        </div>
      </div>
      
      <div class="bg-white rounded-xl shadow-lg p-6 border-l-4 border-purple-500">
        <div class="flex items-center justify-between">
          <div>
            <h3 class="text-gray-500 text-sm font-medium">M√©todo Popular</h3>
            <p id="metodo-popular" class="text-2xl font-bold text-gray-900 mt-1">-</p>
          </div>
          <div class="text-3xl">üí≥</div>
        </div>
      </div>
    </div>
    
    <!-- Formulario de nueva venta -->
    <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
      <div class="flex justify-between items-center mb-6">
        <h3 class="text-xl font-bold text-bavarian-blue">Nueva Venta</h3>
        <button 
          id="toggle-venta-form"
          class="bg-bavarian-blue hover:bg-bavarian-darkBlue text-white px-4 py-2 rounded-lg transition-colors"
        >
          <span id="toggle-text">Mostrar Formulario</span>
        </button>
      </div>
      <div id="venta-form-container" style="display: none;">
        <!-- El componente VentaForm se cargar√° aqu√≠ -->
      </div>
    </div>
    
    <!-- Historial de ventas -->
    <div class="bg-white rounded-xl shadow-lg overflow-hidden">
      <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
        <h3 class="text-lg font-semibold text-bavarian-blue">Historial de Ventas</h3>
        <div class="flex gap-4">
          <select id="filtro-metodo" class="px-3 py-2 border border-gray-300 rounded-lg text-sm">
            <option value="">Todos los m√©todos</option>
            <option value="efectivo">Efectivo</option>
            <option value="tarjeta">Tarjeta</option>
            <option value="transferencia">Transferencia</option>
          </select>
          <input 
            type="date" 
            id="filtro-fecha"
            class="px-3 py-2 border border-gray-300 rounded-lg text-sm"
          />
        </div>
      </div>
      <div class="overflow-x-auto">
        <table class="w-full">
          <thead class="bg-bavarian-blue text-white">
            <tr>
              <th class="px-6 py-4 text-left font-medium">Fecha</th>
              <th class="px-6 py-4 text-left font-medium">Total</th>
              <th class="px-6 py-4 text-left font-medium">M√©todo</th>
              <th class="px-6 py-4 text-left font-medium">Productos</th>
              <th class="px-6 py-4 text-center font-medium">Acciones</th>
            </tr>
          </thead>
          <tbody id="ventas-list">
            <tr>
              <td colspan="5" class="px-6 py-12 text-center text-gray-500">
                <div class="flex flex-col items-center">
                  <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-bavarian-blue mb-4"></div>
                  Cargando ventas...
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</DashboardLayout>

<script>
  import { ventas } from '../services/supabase.js';
  
  let ventasData = [];
  let ventasFiltradas = [];
  let formVisible = false;
  
  const cargarVentas = async () => {
    try {
      const result = await ventas.getAll();
      if (result.data) {
        ventasData = result.data;
        ventasFiltradas = ventasData;
        renderizarVentas();
        actualizarEstadisticas();
      }
    } catch (error) {
      console.error('Error cargando ventas:', error);
      mostrarError('Error cargando ventas');
    }
  };
  
  const toggleFormulario = () => {
    const container = document.getElementById('venta-form-container');
    const toggleBtn = document.getElementById('toggle-text');
    
    if (formVisible) {
      container.style.display = 'none';
      toggleBtn.textContent = 'Mostrar Formulario';
      container.innerHTML = '';
    } else {
      container.style.display = 'block';
      toggleBtn.textContent = 'Ocultar Formulario';
      crearFormularioVenta();
    }
    formVisible = !formVisible;
  };
  
  const crearFormularioVenta = () => {
    const container = document.getElementById('venta-form-container');
    container.innerHTML = `
      <div class="bg-white rounded-xl shadow-lg p-6">
        <h3 class="text-2xl font-bold text-bavarian-blue mb-6 flex items-center">
          <span class="text-3xl mr-2">üõí</span>
          Nueva Venta
        </h3>
        
        <div id="venta-messages"></div>
        
        <div class="mb-8">
          <h4 class="font-semibold text-gray-800 mb-4">Agregar Producto</h4>
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div class="md:col-span-2">
              <input type="text" id="buscar-producto" placeholder="Buscar producto por nombre..." class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-bavarian-blue focus:border-transparent" />
              <div id="productos-sugerencias" class="absolute z-10 w-full bg-white border border-gray-300 rounded-lg mt-1 max-h-60 overflow-y-auto shadow-lg hidden"></div>
            </div>
            <div>
              <input type="number" id="cantidad-producto" min="1" value="1" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-bavarian-blue focus:border-transparent" placeholder="Cantidad" />
            </div>
            <div>
              <button type="button" onclick="agregarProductoCarrito()" class="w-full bg-bavarian-gold hover:bg-yellow-500 text-white py-3 px-4 rounded-lg font-medium transition-colors duration-200">Agregar</button>
            </div>
          </div>
        </div>
        
        <div id="carrito-container" class="mb-8 hidden">
          <h4 class="font-semibold text-gray-800 mb-4">Carrito de Compra</h4>
          <div class="bg-gray-50 rounded-lg overflow-hidden">
            <table class="w-full" id="carrito-table">
              <thead class="bg-bavarian-blue text-white">
                <tr>
                  <th class="px-4 py-3 text-left">Producto</th>
                  <th class="px-4 py-3 text-left">Precio</th>
                  <th class="px-4 py-3 text-left">Cantidad</th>
                  <th class="px-4 py-3 text-left">Subtotal</th>
                  <th class="px-4 py-3 text-center">Acciones</th>
                </tr>
              </thead>
              <tbody id="carrito-items"></tbody>
              <tfoot class="bg-bavarian-blue text-white">
                <tr>
                  <td colspan="3" class="px-4 py-4 font-bold text-right text-lg">Total:</td>
                  <td class="px-4 py-4 font-bold text-xl" id="total-carrito">$0.00</td>
                  <td class="px-4 py-4"></td>
                </tr>
              </tfoot>
            </table>
          </div>
        </div>
        
        <div class="flex flex-col md:flex-row gap-6 items-end">
          <div class="flex-1">
            <label class="block text-sm font-medium text-gray-700 mb-2">M√©todo de Pago</label>
            <select id="metodo-pago" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-bavarian-blue focus:border-transparent">
              <option value="efectivo">üíµ Efectivo</option>
              <option value="tarjeta">üí≥ Tarjeta</option>
              <option value="transferencia">üè¶ Transferencia</option>
            </select>
          </div>
          
          <div class="flex gap-4">
            <button onclick="procesarVenta()" class="bg-bavarian-blue hover:bg-bavarian-darkBlue text-white px-8 py-3 rounded-lg font-bold text-lg transition-all duration-200 transform hover:scale-105">
              Finalizar Venta $<span id="total-final">0.00</span>
            </button>
          </div>
        </div>
      </div>
    `;
    
    inicializarEventosVenta();
  };
  
  let productosDisponibles = [];
  let carritoVenta = [];
  let productoSeleccionado = null;
  
  const inicializarEventosVenta = async () => {
    // Cargar productos disponibles
    const { productos } = await import('../services/supabase.js');
    const result = await productos.getAll();
    productosDisponibles = result.data?.filter(p => p.stock > 0) || [];
    
    // Configurar b√∫squeda de productos
    const buscarInput = document.getElementById('buscar-producto');
    const sugerenciasDiv = document.getElementById('productos-sugerencias');
    
    buscarInput.addEventListener('input', (e) => {
      const busqueda = e.target.value.toLowerCase();
      if (busqueda.length < 2) {
        sugerenciasDiv.classList.add('hidden');
        return;
      }
      
      const productosFiltrados = productosDisponibles.filter(p => 
        p.nombre.toLowerCase().includes(busqueda)
      ).slice(0, 5);
      
      if (productosFiltrados.length > 0) {
        sugerenciasDiv.innerHTML = productosFiltrados.map(p => `
          <div class="px-4 py-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100" onclick="seleccionarProducto('${p.id}', '${p.nombre}', ${p.precio}, ${p.stock})">
            <div class="font-medium">${p.nombre}</div>
            <div class="text-sm text-gray-600">$${p.precio} - Stock: ${p.stock}</div>
          </div>
        `).join('');
        sugerenciasDiv.classList.remove('hidden');
      } else {
        sugerenciasDiv.classList.add('hidden');
      }
    });
  };
  
  const seleccionarProducto = (id, nombre, precio, stock) => {
    productoSeleccionado = { id, nombre, precio, stock };
    document.getElementById('buscar-producto').value = nombre;
    document.getElementById('productos-sugerencias').classList.add('hidden');
  };
  
  const agregarProductoCarrito = () => {
    if (!productoSeleccionado) {
      mostrarMensajeVenta('Selecciona un producto', 'error');
      return;
    }
    
    const cantidad = parseInt(document.getElementById('cantidad-producto').value);
    if (cantidad <= 0 || cantidad > productoSeleccionado.stock) {
      mostrarMensajeVenta('Cantidad inv√°lida o insuficiente stock', 'error');
      return;
    }
    
    const itemExistente = carritoVenta.find(item => item.id === productoSeleccionado.id);
    
    if (itemExistente) {
      const nuevaCantidad = itemExistente.cantidad + cantidad;
      if (nuevaCantidad > productoSeleccionado.stock) {
        mostrarMensajeVenta('Stock insuficiente', 'error');
        return;
      }
      itemExistente.cantidad = nuevaCantidad;
      itemExistente.subtotal = itemExistente.cantidad * itemExistente.precio;
    } else {
      carritoVenta.push({
        id: productoSeleccionado.id,
        nombre: productoSeleccionado.nombre,
        precio: productoSeleccionado.precio,
        cantidad: cantidad,
        subtotal: cantidad * productoSeleccionado.precio
      });
    }
    
    actualizarCarrito();
    limpiarSeleccion();
  };
  
  const actualizarCarrito = () => {
    const container = document.getElementById('carrito-container');
    const tbody = document.getElementById('carrito-items');
    const totalElement = document.getElementById('total-carrito');
    const totalFinalElement = document.getElementById('total-final');
    
    if (carritoVenta.length === 0) {
      container.classList.add('hidden');
      return;
    }
    
    container.classList.remove('hidden');
    
    tbody.innerHTML = carritoVenta.map((item, index) => `
      <tr class="border-b border-gray-200">
        <td class="px-4 py-3 font-medium">${item.nombre}</td>
        <td class="px-4 py-3">$${item.precio.toFixed(2)}</td>
        <td class="px-4 py-3">
          <input type="number" min="1" value="${item.cantidad}" onchange="actualizarCantidadItem(${index}, this.value)" class="w-20 px-2 py-1 border border-gray-300 rounded text-center" />
        </td>
        <td class="px-4 py-3 font-bold text-bavarian-blue">$${item.subtotal.toFixed(2)}</td>
        <td class="px-4 py-3 text-center">
          <button onclick="removerItem(${index})" class="text-red-500 hover:text-red-700 font-bold text-lg">√ó</button>
        </td>
      </tr>
    `).join('');
    
    const total = carritoVenta.reduce((sum, item) => sum + item.subtotal, 0);
    totalElement.textContent = `$${total.toFixed(2)}`;
    totalFinalElement.textContent = total.toFixed(2);
  };
  
  const actualizarCantidadItem = (index, nuevaCantidad) => {
    const cantidad = parseInt(nuevaCantidad);
    if (cantidad <= 0) {
      removerItem(index);
      return;
    }
    
    const item = carritoVenta[index];
    const producto = productosDisponibles.find(p => p.id === item.id);
    
    if (cantidad > producto.stock) {
      mostrarMensajeVenta(`Stock insuficiente para ${producto.nombre}`, 'error');
      return;
    }
    
    carritoVenta[index].cantidad = cantidad;
    carritoVenta[index].subtotal = cantidad * carritoVenta[index].precio;
    actualizarCarrito();
  };
  
  const removerItem = (index) => {
    carritoVenta.splice(index, 1);
    actualizarCarrito();
  };
  
  const limpiarSeleccion = () => {
    productoSeleccionado = null;
    document.getElementById('buscar-producto').value = '';
    document.getElementById('cantidad-producto').value = '1';
    document.getElementById('productos-sugerencias').classList.add('hidden');
  };
  
  const procesarVenta = async () => {
    if (carritoVenta.length === 0) {
      mostrarMensajeVenta('Agrega productos al carrito', 'error');
      return;
    }
    
    try {
      const { auth, ventas } = await import('../services/supabase.js');
      const user = await auth.getUser();
      
      if (!user) {
        mostrarMensajeVenta('Usuario no autenticado', 'error');
        return;
      }
      
      const total = carritoVenta.reduce((sum, item) => sum + item.subtotal, 0);
      const metodoPago = document.getElementById('metodo-pago').value;
      
      const nuevaVenta = {
        usuario_id: user.id,
        total: total,
        metodo_pago: metodoPago
      };
      
      const detalles = carritoVenta.map(item => ({
        producto_id: item.id,
        cantidad: item.cantidad,
        precio_unitario: item.precio,
        subtotal: item.subtotal
      }));
      
      const result = await ventas.create(nuevaVenta, detalles);
      
      if (result.error) {
        mostrarMensajeVenta(result.error.message, 'error');
      } else {
        mostrarExito(`¬°Venta procesada! Total: $${total.toFixed(2)}`);
        carritoVenta = [];
        actualizarCarrito();
        limpiarSeleccion();
        cargarVentas();
        actualizarEstadisticas();
      }
    } catch (error) {
      mostrarMensajeVenta('Error al procesar la venta', 'error');
    }
  };
  
  const mostrarMensajeVenta = (mensaje, tipo) => {
    const container = document.getElementById('venta-messages');
    if (!container) return;
    
    const className = tipo === 'error' ? 'bg-red-50 border-red-200 text-red-700' : 'bg-green-50 border-green-200 text-green-700';
    const icon = tipo === 'error' ? '‚ö†Ô∏è' : '‚úÖ';
    
    container.innerHTML = `
      <div class="${className} border px-4 py-3 rounded-lg mb-4">
        <div class="flex items-center">
          <span class="mr-2">${icon}</span>
          ${mensaje}
        </div>
      </div>
    `;
    
    setTimeout(() => {
      container.innerHTML = '';
    }, 5000);
  };
  
  const eliminarVenta = async (ventaId) => {
  if (confirm('¬øEst√°s seguro de eliminar esta venta?')) {
    try {
      const { supabase } = await import('../services/supabase.js');

      // 1. Borrar primero los detalles de la venta
      const { error: detallesError } = await supabase
        .from('detalles_venta')
        .delete()
        .eq('venta_id', ventaId);

      if (detallesError) {
        mostrarError('Error eliminando detalles de la venta: ' + detallesError.message);
        return;
      }

      // 2. Luego borrar la venta
      const { error: ventaError } = await supabase
        .from('ventas')
        .delete()
        .eq('id', ventaId);

      if (ventaError) {
        mostrarError('Error eliminando venta: ' + ventaError.message);
        return;
      }

      // 3. Si todo sali√≥ bien
      mostrarExito('Venta eliminada exitosamente');
      await cargarVentas();        // refrescar lista
      await actualizarEstadisticas(); // refrescar stats
    } catch (error) {
      console.error('Error eliminando venta:', error);
      mostrarError('Error eliminando venta');
    }
  }
};
  const renderizarVentas = () => {
    const tbody = document.getElementById('ventas-list');
    
    if (ventasFiltradas.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="5" class="px-6 py-12 text-center text-gray-500">
            <div class="flex flex-col items-center">
              <div class="text-4xl mb-4">üõí</div>
              <p class="text-lg font-medium">No hay ventas registradas</p>
              <p class="text-sm">Las ventas aparecer√°n aqu√≠ una vez que realices la primera</p>
            </div>
          </td>
        </tr>
      `;
      return;
    }
    
    tbody.innerHTML = ventasFiltradas.map(venta => {
      const fecha = new Date(venta.fecha_venta);
      const fechaFormateada = fecha.toLocaleDateString('es-MX', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
      
      const metodosIconos = {
        'efectivo': 'üíµ',
        'tarjeta': 'üí≥',
        'transferencia': 'üè¶'
      };
      
      const totalProductos = venta.detalles_venta?.reduce((sum, detalle) => sum + detalle.cantidad, 0) || 0;
      
      return `
        <tr class="border-b border-gray-100 hover:bg-gray-50 transition-colors duration-150">
          <td class="px-6 py-4">
            <div class="text-sm font-medium text-gray-900">${fechaFormateada}</div>
          </td>
          <td class="px-6 py-4">
            <div class="text-lg font-bold text-bavarian-blue">$${parseFloat(venta.total).toFixed(2)}</div>
          </td>
          <td class="px-6 py-4">
            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800">
              ${metodosIconos[venta.metodo_pago] || 'üí∞'} ${venta.metodo_pago}
            </span>
          </td>
          <td class="px-6 py-4">
            <div class="text-sm text-gray-600">${totalProductos} productos</div>
          </td>
          <td class="px-6 py-4 text-center">
            <div class="flex justify-center gap-2">
              <button 
                onclick="verDetalleVenta('${venta.id}')"
                class="text-bavarian-blue hover:text-bavarian-darkBlue font-medium transition-colors duration-150"
                title="Ver detalles"
              >
                üëÅÔ∏è
              </button>
              <button 
                onclick="eliminarVenta('${venta.id}')"
                class="text-red-500 hover:text-red-700 font-medium transition-colors duration-150"
                title="Eliminar venta"
              >
                üóëÔ∏è
              </button>
            </div>
          </td>
        </tr>
      `;
    }).join('');
  };
  
  const actualizarEstadisticas = async () => {
    try {
      // Obtener ventas de hoy
      const ventasHoyResult = await ventas.getVentasHoy();
      const ventasHoy = ventasHoyResult.data || [];
      
      const totalVentasHoy = ventasHoy.reduce((sum, v) => sum + parseFloat(v.total), 0);
      const transaccionesHoy = ventasHoy.length;
      const promedioVenta = transaccionesHoy > 0 ? totalVentasHoy / transaccionesHoy : 0;
      
      // M√©todo de pago m√°s popular
      const metodosPago = {};
      ventasHoy.forEach(v => {
        metodosPago[v.metodo_pago] = (metodosPago[v.metodo_pago] || 0) + 1;
      });
      
      const metodosOrdenados = Object.entries(metodosPago).sort(([,a], [,b]) => b - a);
      const metodoPopular = metodosOrdenados.length > 0 ? metodosOrdenados[0][0] : '-';
      
      // Actualizar UI
      document.getElementById('ventas-hoy').textContent = `$${totalVentasHoy.toFixed(2)}`;
      document.getElementById('transacciones-hoy').textContent = transaccionesHoy;
      document.getElementById('promedio-venta').textContent = `$${promedioVenta.toFixed(2)}`;
      document.getElementById('metodo-popular').textContent = metodoPopular;
      
    } catch (error) {
      console.error('Error actualizando estad√≠sticas:', error);
    }
  };
  
  const filtrarVentas = () => {
    const metodo = document.getElementById('filtro-metodo').value;
    const fecha = document.getElementById('filtro-fecha').value;
    
    ventasFiltradas = ventasData.filter(venta => {
      const matchMetodo = !metodo || venta.metodo_pago === metodo;
      
      let matchFecha = true;
      if (fecha) {
        const fechaVenta = new Date(venta.fecha_venta).toISOString().split('T')[0];
        matchFecha = fechaVenta === fecha;
      }
      
      return matchMetodo && matchFecha;
    });
    
    renderizarVentas();
  };
  
  const verDetalleVenta = (ventaId) => {
    const venta = ventasData.find(v => v.id === ventaId);
    if (!venta) return;
    
    const detalles = venta.detalles_venta || [];

    const detallesHTML = detalles.map(detalle => `
      <div class="flex justify-between items-center py-2 border-b border-gray-100">
        <div>
          <div class="font-medium">${detalle.productos?.nombre || 'Producto'}</div>
          <div class="text-sm text-gray-600">Cantidad: ${detalle.cantidad}</div>
        </div>
        <div class="text-right">
          <div class="font-medium">$${parseFloat(detalle.subtotal).toFixed(2)}</div>
          <div class="text-sm text-gray-600">$${parseFloat(detalle.precio_unitario).toFixed(2)} c/u</div>
        </div>
      </div>
    `).join('');
    
    const fecha = new Date(venta.fecha_venta).toLocaleString('es-MX');
    
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50';
    modal.innerHTML = `
      <div class="bg-white rounded-xl shadow-2xl w-full max-w-md max-h-[80vh] overflow-y-auto">
        <div class="p-6">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-xl font-bold text-bavarian-blue">Detalle de Venta</h3>
            <button onclick="this.closest('.fixed').remove()" class="text-gray-400 hover:text-gray-600 text-2xl">√ó</button>
          </div>
          
          <div class="mb-4 p-4 bg-gray-50 rounded-lg">
            <div class="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span class="text-gray-600">Fecha:</span>
                <div class="font-medium">${fecha}</div>
              </div>
              <div>
                <span class="text-gray-600">M√©todo:</span>
                <div class="font-medium capitalize">${venta.metodo_pago}</div>
              </div>
            </div>
          </div>
          
          <div class="mb-4">
            <h4 class="font-semibold mb-2">Productos:</h4>
            <div class="space-y-1">
              ${detallesHTML}
            </div>
          </div>
          
          <div class="pt-4 border-t border-gray-200">
            <div class="flex justify-between items-center text-lg font-bold">
              <span>Total:</span>
              <span class="text-bavarian-blue">$${parseFloat(venta.total).toFixed(2)}</span>
            </div>
          </div>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
  };
  
  const mostrarError = (mensaje) => {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-4 rounded-lg shadow-lg z-50';
    errorDiv.innerHTML = `
      <div class="flex items-center">
        <span class="text-xl mr-2">‚ùå</span>
        ${mensaje}
      </div>
    `;
    document.body.appendChild(errorDiv);
    
    setTimeout(() => {
      if (document.body.contains(errorDiv)) {
        document.body.removeChild(errorDiv);
      }
    }, 4000);
  };
  
  const mostrarExito = (mensaje) => {
    const successDiv = document.createElement('div');
    successDiv.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-4 rounded-lg shadow-lg z-50';
    successDiv.innerHTML = `
      <div class="flex items-center">
        <span class="text-xl mr-2">‚úÖ</span>
        ${mensaje}
      </div>
    `;
    document.body.appendChild(successDiv);
    
    setTimeout(() => {
      if (document.body.contains(successDiv)) {
        document.body.removeChild(successDiv);
      }
    }, 4000);
  };
  
  // Inicializaci√≥n
  if (typeof window !== 'undefined') {
    document.addEventListener('DOMContentLoaded', () => {
      cargarVentas();
      
      // Event listeners
      document.getElementById('toggle-venta-form').addEventListener('click', toggleFormulario);
      document.getElementById('filtro-metodo').addEventListener('change', filtrarVentas);
      document.getElementById('filtro-fecha').addEventListener('change', filtrarVentas);
      
      // Actualizar estad√≠sticas cada 30 segundos
      setInterval(actualizarEstadisticas, 30000);
    });
  }
  
  // Hacer funciones globales
  window.verDetalleVenta = verDetalleVenta;
  window.eliminarVenta = eliminarVenta;
  window.seleccionarProducto = seleccionarProducto;
  window.agregarProductoCarrito = agregarProductoCarrito;
  window.actualizarCantidadItem = actualizarCantidadItem;
  window.removerItem = removerItem;
  window.procesarVenta = procesarVenta;
  </script>
      <!-- El componente VentaForm se cargar√° aqu√≠ -->
    </div>
    
    </div>
  </div>
</DashboardLayout>

<script>
  import { ventas } from '../services/supabase.js';
  import VentaForm from '../components/VentaForm.svelte';
  
  let ventasData = [];
  let ventasFiltradas = [];
  let ventaFormComponent = null;
  
  const cargarVentas = async () => {
    try {
      const result = await ventas.getAll();
      if (result.data) {
        ventasData = result.data;
        ventasFiltradas = ventasData;
        renderizarVentas();
        actualizarEstadisticas();
      }
    } catch (error) {
      console.error('Error cargando ventas:', error);
      mostrarError('Error cargando ventas');
    }
  };
  
  const renderizarVentas = () => {
    const tbody = document.getElementById('ventas-list');
    
    if (ventasFiltradas.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="5" class="px-6 py-12 text-center text-gray-500">
            <div class="flex flex-col items-center">
              <div class="text-4xl mb-4">üõí</div>
              <p class="text-lg font-medium">No hay ventas registradas</p>
              <p class="text-sm">Las ventas aparecer√°n aqu√≠ una vez que realices la primera</p>
            </div>
          </td>
        </tr>
      `;
      return;
    }
    
    tbody.innerHTML = ventasFiltradas.map(venta => {
      const fecha = new Date(venta.fecha_venta);
      const fechaFormateada = fecha.toLocaleDateString('es-MX', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
      
      const metodosIconos = {
        'efectivo': 'üíµ',
        'tarjeta': 'üí≥',
        'transferencia': 'üè¶'
      };
      
      const totalProductos = venta.detalles_venta?.reduce((sum, detalle) => sum + detalle.cantidad, 0) || 0;
      
      return `
        <tr class="border-b border-gray-100 hover:bg-gray-50 transition-colors duration-150">
          <td class="px-6 py-4">
            <div class="text-sm font-medium text-gray-900">${fechaFormateada}</div>
          </td>
          <td class="px-6 py-4">
            <div class="text-lg font-bold text-bavarian-blue">$${parseFloat(venta.total).toFixed(2)}</div>
          </td>
          <td class="px-6 py-4">
            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800">
              ${metodosIconos[venta.metodo_pago] || 'üí∞'} ${venta.metodo_pago}
            </span>
          </td>
          <td class="px-6 py-4">
            <div class="text-sm text-gray-600">${totalProductos} productos</div>
          </td>
          <td class="px-6 py-4 text-center">
            <button 
              onclick="verDetalleVenta('${venta.id}')"
              class="text-bavarian-blue hover:text-bavarian-darkBlue font-medium transition-colors duration-150"
            >
              Ver detalles
            </button>
          </td>
        </tr>
      `;
    }).join('');
  };
  
  const actualizarEstadisticas = async () => {
    try {
      // Obtener ventas de hoy
      const ventasHoyResult = await ventas.getVentasHoy();
      const ventasHoy = ventasHoyResult.data || [];
      
      const totalVentasHoy = ventasHoy.reduce((sum, v) => sum + parseFloat(v.total), 0);
      const transaccionesHoy = ventasHoy.length;
      const promedioVenta = transaccionesHoy > 0 ? totalVentasHoy / transaccionesHoy : 0;
      
      // M√©todo de pago m√°s popular
      const metodosPago = {};
      ventasHoy.forEach(v => {
        metodosPago[v.metodo_pago] = (metodosPago[v.metodo_pago] || 0) + 1;
      });
      
      const metodosOrdenados = Object.entries(metodosPago).sort(([,a], [,b]) => b - a);
      const metodoPopular = metodosOrdenados.length > 0 ? metodosOrdenados[0][0] : '-';
      
      // Actualizar UI
      document.getElementById('ventas-hoy').textContent = `$${totalVentasHoy.toFixed(2)}`;
      document.getElementById('transacciones-hoy').textContent = transaccionesHoy;
      document.getElementById('promedio-venta').textContent = `$${promedioVenta.toFixed(2)}`;
      document.getElementById('metodo-popular').textContent = metodoPopular;
      
    } catch (error) {
      console.error('Error actualizando estad√≠sticas:', error);
    }
  };
  
  const filtrarVentas = () => {
    const metodo = document.getElementById('filtro-metodo').value;
    const fecha = document.getElementById('filtro-fecha').value;
    
    ventasFiltradas = ventasData.filter(venta => {
      const matchMetodo = !metodo || venta.metodo_pago === metodo;
      
      let matchFecha = true;
      if (fecha) {
        const fechaVenta = new Date(venta.fecha_venta).toISOString().split('T')[0];
        matchFecha = fechaVenta === fecha;
      }
      
      return matchMetodo && matchFecha;
    });
    
    renderizarVentas();
  };
  
  const verDetalleVenta = (ventaId) => {
    const venta = ventasData.find(v => v.id === ventaId);
    if (!venta) return;
    
    const detalles = venta.detalles_venta || [];
    const detallesHTML = detalles.map(detalle => `
      <div class="flex justify-between items-center py-2 border-b border-gray-100">
        <div>
          <div class="font-medium">${detalle.productos?.nombre || 'Producto'}</div>
          <div class="text-sm text-gray-600">Cantidad: ${detalle.cantidad}</div>
        </div>
        <div class="text-right">
          <div class="font-medium">$${parseFloat(detalle.subtotal).toFixed(2)}</div>
          <div class="text-sm text-gray-600">$${parseFloat(detalle.precio_unitario).toFixed(2)} c/u</div>
        </div>
      </div>
    `).join('');
    
    const fecha = new Date(venta.fecha_venta).toLocaleString('es-MX');
    
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50';
    modal.innerHTML = `
      <div class="bg-white rounded-xl shadow-2xl w-full max-w-md max-h-[80vh] overflow-y-auto">
        <div class="p-6">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-xl font-bold text-bavarian-blue">Detalle de Venta</h3>
            <button onclick="this.closest('.fixed').remove()" class="text-gray-400 hover:text-gray-600 text-2xl">√ó</button>
          </div>
          
          <div class="mb-4 p-4 bg-gray-50 rounded-lg">
            <div class="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span class="text-gray-600">Fecha:</span>
                <div class="font-medium">${fecha}</div>
              </div>
              <div>
                <span class="text-gray-600">M√©todo:</span>
                <div class="font-medium capitalize">${venta.metodo_pago}</div>
              </div>
            </div>
          </div>
          
          <div class="mb-4">
            <h4 class="font-semibold mb-2">Productos:</h4>
            <div class="space-y-1">
              ${detallesHTML}
            </div>
          </div>
          
          <div class="pt-4 border-t border-gray-200">
            <div class="flex justify-between items-center text-lg font-bold">
              <span>Total:</span>
              <span class="text-bavarian-blue">$${parseFloat(venta.total).toFixed(2)}</span>
            </div>
          </div>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
  };
  
  const mostrarError = (mensaje) => {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-4 rounded-lg shadow-lg z-50';
    errorDiv.innerHTML = `
      <div class="flex items-center">
        <span class="text-xl mr-2">‚ùå</span>
        ${mensaje}
      </div>
    `;
    document.body.appendChild(errorDiv);
    
    setTimeout(() => {
      if (document.body.contains(errorDiv)) {
        document.body.removeChild(errorDiv);
      }
    }, 4000);
  };
  
  const inicializarVentaForm = () => {
    const container = document.getElementById('venta-form-container');
    
    ventaFormComponent = new VentaForm({
      target: container
    });
    
    ventaFormComponent.$on('ventaCreada', () => {
      cargarVentas();
    });
  };
  
  // Inicializaci√≥n
  if (typeof window !== 'undefined') {
    document.addEventListener('DOMContentLoaded', () => {
      cargarVentas();
      inicializarVentaForm();
      
      // Event listeners para filtros
      document.getElementById('filtro-metodo').addEventListener('change', filtrarVentas);
      document.getElementById('filtro-fecha').addEventListener('change', filtrarVentas);
      
      // Actualizar estad√≠sticas cada 30 segundos
      setInterval(actualizarEstadisticas, 30000);
    });
  }
  
  // Hacer funciones globales
  window.verDetalleVenta = verDetalleVenta;
</script>
</DashboardLayout>